#!/usr/bin/env python3

# This is an adjusted version of the bin2header.py script from John Schember
# which is distributed under the MIT license
# See: https://github.com/user-none/Bin-Headers

import sys
import itertools
from argparse import ArgumentParser
from pathlib import Path

def string_to_header(string, var_name):
    out = []
    out.append(f'char const {var_name}[] = {{')

    string += '\0'
    chunks = [ string[i : i + 12] for i in range(0, len(string), 12) ]

    for i, chunk in enumerate(chunks):
        line = ', '.join([ f'0x{ord(c):02x}' for c in chunk ])
        out.append(f'        {line},')

    out.append( '};')

    return '\n'.join(out) + '\n'

if __name__ == '__main__':
    parser = ArgumentParser(description = 'Generate resource headers')
    parser.add_argument('-i', type = str, nargs = '+', required = True, help = 'Input files')
    parser.add_argument('-o', type = str, nargs = '+', required = True, help = 'Output files')
    parser.add_argument('-d', type = str, required = True, help = 'Output directory')
    args = parser.parse_args()

    assert(args)
    assert(len(args.i) == len(args.o))

    for (i, o) in zip(args.i, args.o):
        i_path = Path(i)
        var_suffix = i_path.name.replace('.', '_')

        result  =  '/* This file is automatically generated by file_to_header.py */\n'
        result +=  '\n'
        result += f'#ifndef FLECS_LUAJIT_RES_{var_suffix.upper()}\n'
        result += f'#define FLECS_LUAJIT_RES_{var_suffix.upper()}\n'
        result +=  '\n'
        result +=  string_to_header(i_path.read_text(), f'g_flecs_file_{var_suffix}')
        result +=  '\n'
        result +=  '#endif\n'

        d_path = Path(args.d)
        d_path.mkdir(parents = True, exist_ok = True)
        (d_path / o).write_text(result)
